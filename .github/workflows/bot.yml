name: TradingBot

on:
  schedule:
    - cron: "0 * * * *"   # cada hora (cambia a "*/5 * * * *" si quieres cada 5 minutos)
  workflow_dispatch:

jobs:
  run-bot:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install gspread oauth2client pandas pytz

      - name: Run bot
        env:
          GCP_SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          SPREADSHEET_ID: ${{ secrets.SPREADSHEET_ID }}
          GMAIL_USER: ${{ secrets.GMAIL_USER }}
          GMAIL_APP_PASS: ${{ secrets.GMAIL_APP_PASS }}
        run: |
          cat > bot.py <<'EOF'
import os, ssl, smtplib, json
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime
import pytz, gspread, pandas as pd
from oauth2client.service_account import ServiceAccountCredentials

TZ_NY = pytz.timezone("America/New_York")

def now_et():
    return datetime.now(TZ_NY)

def fmt_dt(dt):
    return dt.strftime("%m/%d/%Y %I:%M:%S %p")

def market_status(dt):
    open_t  = dt.replace(hour=9, minute=30, second=0, microsecond=0)
    close_t = dt.replace(hour=16, minute=0,  second=0, microsecond=0)
    nyse_open = (dt.weekday() < 5) and (dt >= open_t and dt <= close_t)
    return nyse_open

def send_email(subject, html, to_addrs):
    user = os.environ["GMAIL_USER"]
    app_pass = os.environ["GMAIL_APP_PASS"]

    msg = MIMEMultipart("alternative")
    msg["From"] = user
    msg["To"] = ", ".join(to_addrs)
    msg["Subject"] = subject
    msg.attach(MIMEText(html, "html"))

    ctx = ssl.create_default_context()
    with smtplib.SMTP_SSL("smtp.gmail.com", 465, context=ctx) as server:
        server.login(user, app_pass)
        server.sendmail(user, to_addrs, msg.as_string())

def get_sheet_client():
    sa_json = os.environ["GCP_SERVICE_ACCOUNT"]
    info = json.loads(sa_json)
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds = ServiceAccountCredentials.from_json_keyfile_dict(info, scope)
    return gspread.authorize(creds)

def load_signals():
    client = get_sheet_client()
    ss_id = os.environ["SPREADSHEET_ID"]
    sh = client.open_by_key(ss_id)
    ws = sh.sheet1
    rows = ws.get_all_records()
    return pd.DataFrame(rows)

def build_report(df):
    now = now_et()
    nyse_open = market_status(now)
    last = df.tail(10)
    return f"""
    <h3>Reporte TradingBot</h3>
    <p><b>Hora:</b> {fmt_dt(now)}</p>
    <p>NYSE: {'ABIERTO' if nyse_open else 'CERRADO'}</p>
    {last.to_html(index=False) if not last.empty else 'Sin datos'}
    """

def main():
    df = load_signals()
    body = build_report(df)
    send_email("Reporte TradingBot", body, [os.environ["GMAIL_USER"]])

if __name__ == "__main__":
    main()
EOF
          python bot.py
